---
title: "Unlocking the power of Data Viz animation and interactivity in Quarto"
date: 09/20/2023
author: Deepsha Menghani
format: 
  revealjs:
    self-contained: false
    slide-number: c/t
    highlight-style: github
    width: 1600
    height: 900
    logo: "Images/posit-logo-fullcolor-TM.png"
    footer: "[https://bit.ly/deepsha](https://bit.ly/deepsha)"
    theme: ["simple", "styles.scss"]
    echo: false
    multiplex: true
    code-link: true
    code-line-numbers: false
    fig-cap-location: bottom
    title-slide-attributes:
      data-background-color: "#004E4F"
editor: source
---

```{r}
library(tidyverse)
library(plotly)
library(crosstalk)
df_xls <- readxl::read_xlsx("./data/Ted_Lasso_RK_f_count.xlsx") |> 
  mutate(Dating_Coaching_flag = case_when(
    Dating_flag == "Yes" & Coaching_flag == "Yes" ~ paste0("Dating<br>&<br>Coaching"),
    Dating_flag == "Yes" & Coaching_flag == "No" ~ paste0("Dating<br>only"),
    Dating_flag == "No" & Coaching_flag == "Yes" ~ paste0("Coaching<br>only"),
         .default = "Neither")) 
```

# My goal is to answer

## {auto-animate=true}

<br>

<br>

<br>


- What is Data Viz animation, interactivity and linking?

## {auto-animate=true}

<br>

<br>

<br>

- How can you get started with it in your storytelling?
- What is Data Viz animation, interactivity and linking?

## {auto-animate=true}

<br>

<br>

<br>

- And have fun learning with me, Ted Lasso and Roy Kent!!
- How can you get started with it in your storytelling?
- What is Data Viz animation, interactivity and linking?


## {auto-animate=true}

<br>

There are lots of amazing packages for animation and interactivity like...

<br>

<br>

- Shiny
- Highcharter
- Ggiraph
- Gganimate
- Observablejs Plot
- Plotly
- Crosstalk
- And many more...

## {auto-animate=true}

<br>

For this presentation, I will share examples of -
<br>

<br>

- __Plotly__
- __Crosstalk__

# But first.. What is Ted Lasso and who is Roy Kent?

<br>

![](Images/rk_tl.jpg){width="20%" fig-align="center"}

# Various moods of Roy Kent

<br>

::: {layout="[[1,1,1,1], [1,1,1,1]]"}

::: {.fragment}

![Happy](Images/rk_wtf.jpg)
:::

::: {.fragment}

![Sad](Images/rk_wtf.jpg)

:::

::: {.fragment}


![Mad](Images/rk_wtf.jpg)
:::

::: {.fragment}


![Amused](Images/rk_wtf.jpg)
:::

::: {.fragment}

![Loving](Images/rk_wtf.jpg)

:::

::: {.fragment}


![Surprised](Images/rk_wtf.jpg)
:::

::: {.fragment}


![Thoughtful](Images/rk_wtf.jpg)
:::

::: {.fragment}


![Joyous](Images/rk_wtf.jpg)
:::

:::

# So, let's look at the number of F-bombs dropped by Roy Kent!

# Animation {background-color="#004E4F"}

# Let's start with a question...

## Q1: What season did Roy Kent end up dropping the most number of F-bombs?

<br>

::: {.fragment}

```{r}

library(tidyverse)
library(plotly)
library(crosstalk)

df_xls |> 
  complete(Season, Episode) |>
  fill(cum_rk_season, .direction = "down") |>
  mutate(Season = str_glue("Season {Season}")) |>
  mutate(Season = (fct_reorder(as.factor(Season), -cum_rk_season))) |>
  mutate(Episode_act = case_when(Season == "Season 1" & Episode %in% c(11:12) ~ 10,
                                 TRUE ~ Episode)) |> 
  plot_ly(width = 1400, height=600) |> 
  add_bars(y=~Season, x = ~cum_rk_season, frame = ~Episode, 
           type="bar", ids = ~Season, color = ~Season,
           customdata = ~Episode_act,
           hovertemplate = paste("%{y}<br>",
                                 "Episode: %{customdata}<br>",
                                 "Cumulative count: %{x}<extra></extra>")
  ) |>
  add_text(frame = ~Episode, y=~Season, x = ~cum_rk_season+4, text = ~cum_rk_season, textfont = list(size = 25)) |> 
  animation_opts(frame = 800, transition = 300) |>
  layout(title = list(text = "Cumulative F-bombs by Roy Kent each season", font = list(size = 30, color = "gray60")),
         yaxis = list(title = "", tickfont = list(size = 25)),
         xaxis = list(title = "", ticktext = list(), tickvals = list()),
         margin = list(t = 100)
         ) |>
  animation_slider(currentvalue = list(font = list(color = "#d3d3d3",size = 60))) |> 
  config(displayModeBar = FALSE) |> 
  hide_legend()
```

:::

# By adding animation you can hold the tension in your story

## Code structure for creating animation using Plotly

<br>

### Simple bar plot

```{.r echo=TRUE}

dataset |> 
  plot_ly(y=~count, x = ~season) |> 
  add_bars(type="bar")
  
```

<br>

::: {.fragment}

### Bar plot with animation

```{.r echo=TRUE}

dataset |> 
  plot_ly(y=~count, x = ~season) |> 
  add_bars(frame = ~Episode, type="bar")
  
```

:::



## Code structure for creating animation using Plotly

<br>

### Simple bar plot

```{.r echo=TRUE}

dataset |> 
  plot_ly(y=~count, x = ~season) |> 
  add_bars(type="bar") 
  
```

<br>


### Bar plot with animation

```{.r echo=TRUE}

dataset |> 
  plot_ly(y=~count, x = ~season) |> 
  add_bars(frame = ~Episode, type="bar") |> 
  animation_opts(frame = 800, transition = 300)
  
```


# Interactivity {background-color="#004E4F"}

# Let's get technical and talk about statistics
# Let's get technical and talk about statistics - "F-SCORE"

# What is an episode's F-SCORE {text-align=center}

<br>

::: {.fragment}

<br>

$$
f-score = {Roy Kent  F-bombs / \choose Total  F-bombs} * 100 (\%)
$$
:::


## Q2: Which season has the most episodes with F-Score > 50%?

<br>

::: {.fragment}

In non-statistical terms - In how many episodes per season did Roy Kent contribute to more than half the F-bombs? 

<br>

And...which season had the highest number of such episodes?

:::

<br>

::: {.fragment}

### Can you guess the answer?

- Season 1 - Total F-bombs: __56__


- Season 2 - Total F-bombs: __106__


- Season 3 - Total F-bombs: __138__

:::

## We can display F-score for each episode as below

::: {.fragment}

```{r}
p1 <- df_xls |> 
  plot_ly(
    x = ~Season_Episode, 
    y = ~F_score*100, 
    width = 1200,
    height = 800
  ) |> 
  add_bars(
    type="bar",
    customdata = ~paste0(F_perc,"%"),  # Include the Episode variable in customdata
           hovertemplate = paste("<span style='font-size:18px;'>%{x}</span><br><br>",
                        "<span style='font-size:20px;'>F-score: %{customdata}</span><extra></extra>"),
    marker = list(color = '#004E4F')  # Change color to blue
  ) |> 
  layout(
    xaxis = list(
      title = "", 
      ticktext = list(), 
      tickvals = list()
    ),
    yaxis = list(
      title = "F-score (%)",
      titlefont = list(size = 24, standoff = 45),  # Increase y-axis title font size
      tickfont = list(size = 18)    # Increase y-axis labels font size
    ),
    title = "",
    shapes = list(
      list(type = "line",
        x0 = 0,x1 = 1,xref = "paper", y0 = 50, y1 = 50,yref = "y",
        line = list(
          color = "black",
          width = 2,
          dash = "dash"  # Make line dotted
        )
      )
    )
  ) |> 
  config(displayModeBar = FALSE) |> 
  hide_legend()



bscols(widths = c(NA,10),"",p1)
```
:::



## Or we can add a "season" checkbox to make it easier to read

```{r}
shared_data <- df_xls |> SharedData$new()

plot2 <- shared_data |> 
  plot_ly(
    x = ~Season_Episode, 
    y = ~F_score*100, 
    width = 1200,
    height = 800
  ) |> 
  add_bars(
    type="bar",
    customdata = ~paste0(F_perc,"%"),  # Include the Episode variable in customdata
  hovertemplate = paste("<span style='font-size:18px;'>%{x}</span><br><br>",
                        "<span style='font-size:20px;'>F-score: %{customdata}</span><extra></extra>"),
    marker = list(color = '#004E4F')  # Change color to blue
  ) |> 
  layout(
    xaxis = list(
      title = "", 
      ticktext = list(), 
      tickvals = list()
    ),
    yaxis = list(
      title = "F-score (%)",
      titlefont = list(size = 24, standoff = 45),  # Increase y-axis title font size
      tickfont = list(size = 18)    # Increase y-axis labels font size
    ),
    title = "",
    shapes = list(
      list(type = "line",
        x0 = 0,x1 = 1,xref = "paper", y0 = 50, y1 = 50,yref = "y",
        line = list(
          color = "black",
          width = 2,
          dash = "dash"  # Make line dotted
        )
      )
    )
  ) |> 
  config(displayModeBar = FALSE) |> 
  hide_legend()

bscols(widths = c(NA,1,10),
       " ",
       filter_checkbox(
        id = "Season", label = "Season", 
        sharedData = shared_data,
        group = ~Season
), plot2)

```




# Through interactivity you can give your stakeholders more control  in engaging with your story

## Code structure for adding interativity with Crosstalk

<br>

### Simple bar plot

```{.r echo=TRUE}
dataset |> 
  plot_ly(y=~F_score, x = ~episode) |> 
  add_bars(type="bar") 
```

<br>

::: {.fragment}

### Bar plot with interativity 


```{.r echo=TRUE}
shared_data <- dataset |> SharedData$new()
```

:::

## Code structure for adding interativity with Crosstalk

<br>

### Simple bar plot

```{.r echo=TRUE}
dataset |> 
  plot_ly(y=~F_score, x = ~episode) |> 
  add_bars(type="bar")
```

<br>


### Bar plot with interativity 


```{.r echo=TRUE}
shared_data <- dataset |> SharedData$new()

plot <- shared_data |> 
  plot_ly(y=~F_score, x = ~episode) |> 
  add_bars(type="bar")
```


## Code structure for adding interativity with Crosstalk

<br>

### Simple bar plot

```{.r echo=TRUE}
dataset |> 
  plot_ly(y=~F_score, x = ~episode) |> 
  add_bars(type="bar")
```

<br>


### Bar plot with interativity 


```{.r echo=TRUE}
shared_data <- dataset |> SharedData$new()

plot <- shared_data |> 
  plot_ly(y=~F_score, x = ~episode) |> 
  add_bars(type="bar")

bscols(widths = c(2,10),
       filter_checkbox(
          id = "Season", 
          label = "Season", 
          sharedData = shared_data,  
          group = ~Season
      ), 
      plot)
```

# Linking {background-color="#004E4F"}

# Q3: Did Roy Kent have a lower average F-score while dating Keeley or while he was coaching?

![](Images/keeley.gif){width="50%" fig-align="center"}


## We can use a bar plot to display average F-Score

:::: columns

::: {.column width="60%"}

::: {.fragment}

```{r}
df_xls |> 
  plot_ly(width = 900,
          height = 800) |> 
  group_by(Dating_Coaching_flag) |> 
  summarise(avg.fscore = mean(F_score, na.rm=TRUE),
            F_perc = scales::percent(mean(F_score, na.rm=TRUE))) |> 
  add_bars(type="bar", y = ~Dating_Coaching_flag, x = ~avg.fscore,
           customdata = ~paste0(F_perc),  # Include the Episode variable in customdata
           hovertemplate = paste("<span style='font-size:18px;'>%{y}</span><br><br>",
                        "<span style='font-size:20px;'>%{customdata}</span><extra></extra>"),
    marker = list(color = '#004E4F') ) |>
  add_text(y = ~Dating_Coaching_flag, x = ~avg.fscore-0.04,  text = ~F_perc, textfont = list(size = 25, color = "#d3d3d3")) |>
  layout(
    barmode = "overlay",
    yaxis = list(
      title = "", 
      titlefont = list(size = 24, standoff = 45),  # Increase y-axis title font size
      tickfont = list(size = 24)  
    ),
    xaxis = list(
      title = list(text = "F-score (%)", font = list(size = 24)),
      ticktext = list(), tickvals = list()   # Increase y-axis labels font size
    ),
    title = ""
  ) |> 
  config(displayModeBar = FALSE) |> 
  hide_legend()
```

:::

:::

::: {.column width="40%"}

<br>

::: {.fragment}

This is just fine... but as Roy Kent said - 

:::

<br>


::: {.fragment}

![](Images/rk_dont_settle_for_fine2.gif){width="100%" fig-align="center"}

:::

:::

::::

# So, let's enable additional insights by linking it to another plot

## 

```{r}

custom_colors <- c("#1f77b4", "#E69F00","#000000")


shared_data <- df_xls |> 
  mutate(Season = as.factor(Season)) |> 
  SharedData$new(key=~Dating_Coaching_flag)

p1 <- shared_data |> 
  plot_ly(width = 500,
          height = 400) |> 
  group_by(Dating_Coaching_flag) |> 
  summarise(avg.fscore = mean(F_score, na.rm=TRUE),
            F_perc = scales::percent(mean(F_score, na.rm=TRUE))) |> 
  add_bars(type="bar", y = ~Dating_Coaching_flag, x = ~avg.fscore,
           customdata = ~paste0(F_perc),  # Include the Episode variable in customdata
           hovertemplate = paste("<span style='font-size:18px;'>%{y}</span><br><br>",
                        "<span style='font-size:20px;'>%{customdata}</span><extra></extra>"),
    marker = list(color = '#004E4F') ) |>
  add_text(y = ~Dating_Coaching_flag, x = ~avg.fscore-0.04,  text = ~F_perc, textfont = list(size = 25, color = "#d3d3d3")) |>
  layout(
    barmode = "overlay",
    yaxis = list(
      title = "", 
      titlefont = list(size = 24, standoff = 45),  # Increase y-axis title font size
      tickfont = list(size = 24)  
    ),
    xaxis = list(
      title = list(text = "F-score (%)", font = list(size = 24)),
      ticktext = list(), tickvals = list()   # Increase y-axis labels font size
    ),
    title = ""
  ) |> 
  config(displayModeBar = FALSE) |> 
  hide_legend()

p2 <- shared_data |> 
  plot_ly(x = ~Episode_order, y = ~F_count_RK, 
          width = 1500,
          height = 800) |> 
  add_bars(
    type="bar",
    customdata = ~paste0("Total: ",F_count_total, "<br><br>", "F-score: ", F_perc, "<br><br>", Season_Episode,"%"),  
           hovertemplate = paste("<span style='font-size:18px;'>Roy Kent: %{y}</span><br><br>",
                        "<span style='font-size:20px;'>%{customdata}</span><extra></extra>"),
    color = ~Season,
    colors  = custom_colors
  ) |> 
  add_text(y = -1, x = 5,  text = "Season 1", textfont = list(size = 25, color = custom_colors[1])) |>
  add_text(y = -1, x = 17,  text = "Season 2", textfont = list(size = 25, color = custom_colors[2])) |>
  add_text(y = -1, x = 29,  text = "Season 3", textfont = list(size = 25, color = custom_colors[3])) |>
  add_text(y = 25, x = 17,  text = "F-bombs dropped by Roy Kent per episode", textfont = list(size = 30, color = "gray60")) |>
  layout(
    xaxis = list(
      title = "", 
      ticktext = list(), 
      tickvals = list()
    ),
    yaxis = list(
      title = "F-bombs dropped by Roy Kent per episode",
      titlefont = list(size = 24, standoff = 45),  # Increase y-axis title font size
      tickfont = list(size = 18)    # Increase y-axis labels font size
    ),
    title = "",
    shapes = list(
      list(type = "line",
        x0 = 0,x1 = 1,xref = "paper", y0 = 15, y1 = 15,yref = "y",
        line = list(
          color = "black",
          width = 2,
          dash = "dash"  # Make line dotted
        )
      )
    ),
    showlegend=FALSE
  ) |> 
  config(displayModeBar = FALSE) |> 
  hide_legend()

subplot(p1,p2, nrows = 1, widths = c(0.45, 0.55), shareX = TRUE, shareY = FALSE) |> 
  highlight(persistent = TRUE
            , on = "plotly_click"
            , off = "plotly_doubleclick"
            , dynamic = TRUE
            ) |> 
  hide_legend()
```


# Through linking you can add layers to the story so your stakeholders can arrive at their own insights

## Code structure for linking two plots

<br>

::: {.fragment}

```{.r echo=TRUE}
shared_data <- dataset |> 
  SharedData$new(key=~Dating_Coaching_flag)
```

:::

## Code structure for linking two plots

<br>

```{.r echo=TRUE}
shared_data <- dataset |> 
  SharedData$new(key=~Dating_Coaching_flag)

plot1 <- shared_data |> 
  plot_ly() |> 
  group_by(Dating_Coaching_flag) |> 
  summarise(avg.fscore = mean(F_score, na.rm=TRUE)) |> 
  add_bars(y = ~Dating_Coaching_flag, x = ~avg.fscore, type="bar")
  
```

## Code structure for linking two plots

<br>


```{.r echo=TRUE}
shared_data <- dataset |> 
  SharedData$new(key=~Dating_Coaching_flag)

plot1 <- shared_data |> 
  plot_ly() |> 
  group_by(Dating_Coaching_flag) |> 
  summarise(avg.fscore = mean(F_score, na.rm=TRUE)) |> 
  add_bars(y = ~Dating_Coaching_flag, x = ~avg.fscore, type="bar")
  
plot2 <- shared_data |> 
  plot_ly(x = ~Episode, y = ~F_count) |> 
  add_bars(type="bar") 

```


## Code structure for linking two plots

<br>

```{.r echo=TRUE}
shared_data <- dataset |> 
  SharedData$new(key=~Dating_Coaching_flag)

plot1 <- shared_data |> 
  plot_ly() |> 
  group_by(Dating_Coaching_flag) |> 
  summarise(avg.fscore = mean(F_score, na.rm=TRUE)) |> 
  add_bars(y = ~Dating_Coaching_flag, x = ~avg.fscore, type="bar")
  
plot2 <- shared_data |> 
  plot_ly(x = ~Episode, y = ~F_count) |> 
  add_bars(type="bar") 

subplot(p1,p2) |> 
  highlight(persistent = TRUE
            , on = "plotly_click"
            , off = "plotly_doubleclick"
            , dynamic = TRUE
            ) 
```


# Now that you have these tools...

# Let's combine Animation and Interactivity and Linking - all together!!!

::: {.fragment}
In other words, what not to do!!
:::

## Disclaimer: Not recommended...

```{r}
shared_data <- df_xls |> 
  SharedData$new(key=~Season_Episode)

p1 <- shared_data |> 
  plot_ly(x = ~Episode_order, y = ~F_count_RK, text = ~Season_Episode, type="bar",
          width = 1200,
          height = 800) |> 
  add_bars(frame = ~Season)  |> 
  layout(barmode = "overlay")

p2 <- shared_data |> 
  plot_ly(x = ~Episode_order, y = ~F_perc, text = ~Season_Episode, type="bar",
          width = 1200,
          height = 800) |> 
  add_bars(frame = ~Season) |> 
  layout(barmode = "overlay")


bscols(widths = c(NA,1,10),
       "",
       filter_checkbox(
         id = "Season", label = "Season", 
         sharedData = shared_data,
         group = ~Season
       ),
       subplot(p1,p2) |> 
         highlight(persistent = TRUE
                   , on = "plotly_click"
                   , off = "plotly_doubleclick"
         ) |> 
         hide_legend())

```

## So if you were planning to now make everything animated and interactive...

<br> 

::: {.fragment}

![](Images/rk_please stop.gif){width="60%" fig-align="center"}

:::


## Animation and interactivity enables you to

<br>

::: {.incremental}

- Hold tension in your story
- Give your stakeholders more control in engaging with your story
- Add layers to your story so your stakeholders can arrive at their own insights

:::

<br>

::: {.fragment}

### ___And use it all wisely!___

:::

## Next steps

:::: columns

::: {.column width="40%"}

<br>

::: {.fragment}

::: callout-note
# Github repository for code

[Slides and plots code](https://github.com/deepshamenghani/gganimate_and_plotly)
:::

:::

::: {.fragment}

::: callout-tip
# Plotly and Crosstalk

[Plotly for R](https://github.com/deepshamenghani/gganimate_and_plotly) and [Crosstalk]()
:::

:::

::: {.fragment}

::: callout-warning
# Don't animate everything

[Plotly for R](https://github.com/deepshamenghani/gganimate_and_plotly) and [Crosstalk]()
:::

:::

::: {.fragment}

::: callout-important
# Watch Ted Lasso

[Plotly for R](https://github.com/deepshamenghani/gganimate_and_plotly) and [Crosstalk]()
:::

:::

:::

::: {.column width="60%"}

<br>

<br>


::: {.fragment}

![](Images/ted-lasso-believe.gif){width="80%" fig-align="center"}
:::

:::

::::